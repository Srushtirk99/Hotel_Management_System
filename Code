#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <memory>   // for smart pointers
using namespace std;

// ================== Abstract Base Class (Abstraction) ==================
class Person {
protected:
    string name;
public:
    Person(string n) : name(n) {}
    virtual void displayDetails() const = 0;  // Pure virtual (Abstraction)
    virtual ~Person() {}
};

// ================== Customer Class (Encapsulation + Inheritance) ==================
class Customer : public Person {
private:
    int stayDuration;
    double bill;
    int roomNumber;

public:
    Customer(string n, int d, double b, int r)
        : Person(n), stayDuration(d), bill(b), roomNumber(r) {
        if (d <= 0) throw invalid_argument("Stay duration must be positive!");
        if (b < 0) throw invalid_argument("Bill cannot be negative!");
    }

    void displayDetails() const override {   // Polymorphism
        cout << "👤 Name: " << name << " | 🛏 Room: " << roomNumber
             << " | Stay: " << stayDuration << " days | 💰 Bill: " << bill << " INR\n";
    }

    void checkRewards() const {
        if (stayDuration > 5)
            cout << "🎉 Congrats " << name << "! You earned a FREE Dessert 🍮\n";
    }

    double getBill() const { return bill; }
    string getName() const { return name; }
    int getRoomNumber() const { return roomNumber; }

    // Operator Overloading (Comparison by Bill)
    bool operator>(const Customer& other) const {
        return bill > other.bill;
    }
};

// ================== Room Class (Base) ==================
class Room {
protected:
    int roomNumber;
    double pricePerDay;

public:
    Room(int number, double price) : roomNumber(number), pricePerDay(price) {}
    virtual double calculateBill(int days) { return days * pricePerDay; }
    virtual void showRoomInfo() {
        cout << "🏨 Room " << roomNumber << " | Price: " << pricePerDay << " INR/day\n";
    }
    int getRoomNumber() const { return roomNumber; }
    virtual ~Room() {}
};

// ================== Derived Room Types (Inheritance + Polymorphism) ==================
class StandardRoom : public Room {
public:
    StandardRoom(int number) : Room(number, 2000) {}
    void showRoomInfo() override {
        cout << "🛏 Standard Room " << roomNumber << " | Price: " << pricePerDay << " INR/day\n";
    }
};

class LuxuryRoom : public Room {
public:
    LuxuryRoom(int number) : Room(number, 5000) {}
    double calculateBill(int days) override { return (days * pricePerDay) + 2000; }
    void showRoomInfo() override {
        cout << "✨ Luxury Room " << roomNumber
             << " | Price: " << pricePerDay << " INR/day (Includes Spa)\n";
    }
};

// ================== Hotel Class ==================
class Hotel {
private:
    vector<shared_ptr<Customer>> customers;   // STL + Smart Pointers
    vector<shared_ptr<Room>> rooms;
    static int nextRoomNumber;
    static double totalRevenue;

public:
    // Encapsulation with static members
    int assignRoom() { return nextRoomNumber++; }

    void addCustomer(string name, int days, bool luxury = false) {
        int roomNo = assignRoom();

        shared_ptr<Room> room = luxury ?
    static_pointer_cast<Room>(make_shared<LuxuryRoom>(roomNo)) :
    static_pointer_cast<Room>(make_shared<StandardRoom>(roomNo));


        double bill = room->calculateBill(days);
        auto cust = make_shared<Customer>(name, days, bill, roomNo);

        rooms.push_back(room);
        customers.push_back(cust);
        totalRevenue += bill;

        cout << "✅ Customer added successfully!\n";
        cust->displayDetails();
        cust->checkRewards();
        cout << endl;
    }

    void showAllCustomers() {
        if (customers.empty()) {
            cout << "⚠️ No customers yet.\n";
            return;
        }
        cout << "===== 👥 Customer List =====\n";
        for (auto& c : customers) c->displayDetails();
    }

    void findCustomer(string name) {
        auto it = find_if(customers.begin(), customers.end(), [&](shared_ptr<Customer> c) {
            return c->getName() == name;
        });
        if (it != customers.end()) {
            cout << "✅ Customer found!\n";
            (*it)->displayDetails();
        } else {
            cout << "❌ No customer with that name.\n";
        }
    }

    void showRevenue() {
        cout << "💰 Total Hotel Revenue: " << totalRevenue << " INR\n";
    }

    void showTopSpender() {
        if (customers.empty()) {
            cout << "⚠️ No customers to compare.\n";
            return;
        }
        auto richest = *max_element(customers.begin(), customers.end(),
                                    [](auto& a, auto& b) { return *a > *b ? false : true; });
        cout << "👑 Top Spender: ";
        richest->displayDetails();
    }
};

// Initialize static members
int Hotel::nextRoomNumber = 101;
double Hotel::totalRevenue = 0;

// ================== Main Function ==================
int main() {
    Hotel h;
    int choice;

    cout << "\n🏨 Welcome to Srushti's OOP Hotel Management System 🏨\n";

    do {
        cout << "\n===== MENU =====\n";
        cout << "1. Add Customer (Standard Room)\n";
        cout << "2. Add Customer (Luxury Room)\n";
        cout << "3. Show All Customers\n";
        cout << "4. Find Customer by Name\n";
        cout << "5. Show Total Revenue\n";
        cout << "6. Show Top Spender\n";
        cout << "7. Exit\n";
        cout << "👉 Enter choice: ";
        cin >> choice;

        try {
            if (choice == 1 || choice == 2) {
                string name;
                int days;
                cout << "👤 Enter Customer Name: ";
                cin >> name;
                cout << "📅 Enter Stay Duration (days): ";
                cin >> days;
                h.addCustomer(name, days, (choice == 2));
            } else if (choice == 3) {
                h.showAllCustomers();
            } else if (choice == 4) {
                string name;
                cout << "🔍 Enter Customer Name: ";
                cin >> name;
                h.findCustomer(name);
            } else if (choice == 5) {
                h.showRevenue();
            } else if (choice == 6) {
                h.showTopSpender();
            } else if (choice != 7) {
                cout << "⚠️ Invalid choice!\n";
            }
        } catch (exception& e) {
            cout << "⚠️ Error: " << e.what() << "\n";
        }

    } while (choice != 7);

    cout << "👋 Thank you for using the Hotel Management System. Goodbye!\n";
    return 0;
}
